// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { TreeForTableResponse } from "./TreeForTableResponse";
import {
  TreeForTableResponseFromJSON,
  TreeForTableResponseFromJSONTyped,
  TreeForTableResponseToJSON,
  TreeForTableResponseToJSONTyped,
} from "./TreeForTableResponse";

/**
 *
 * @export
 * @interface TreeForTableResponseChildInformation
 */
export interface TreeForTableResponseChildInformation {
  /**
   *
   * @type {number}
   * @memberof TreeForTableResponseChildInformation
   */
  rule: number;
  /**
   *
   * @type {Array<TreeForTableResponse>}
   * @memberof TreeForTableResponseChildInformation
   */
  children: Array<TreeForTableResponse>;
}

/**
 * Check if a given object implements the TreeForTableResponseChildInformation interface.
 */
export function instanceOfTreeForTableResponseChildInformation(
  value: object,
): value is TreeForTableResponseChildInformation {
  if (!("rule" in value) || value["rule"] === undefined) return false;
  if (!("children" in value) || value["children"] === undefined) return false;
  return true;
}

export function TreeForTableResponseChildInformationFromJSON(
  json: any,
): TreeForTableResponseChildInformation {
  return TreeForTableResponseChildInformationFromJSONTyped(json, false);
}

export function TreeForTableResponseChildInformationFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): TreeForTableResponseChildInformation {
  if (json == null) {
    return json;
  }
  return {
    rule: json["rule"],
    children: (json["children"] as Array<any>).map(
      TreeForTableResponseFromJSON,
    ),
  };
}

export function TreeForTableResponseChildInformationToJSON(
  json: any,
): TreeForTableResponseChildInformation {
  return TreeForTableResponseChildInformationToJSONTyped(json, false);
}

export function TreeForTableResponseChildInformationToJSONTyped(
  value?: TreeForTableResponseChildInformation | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    rule: value["rule"],
    children: (value["children"] as Array<any>).map(TreeForTableResponseToJSON),
  };
}
