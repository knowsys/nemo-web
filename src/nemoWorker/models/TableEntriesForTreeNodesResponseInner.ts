/* tslint:disable */
/* eslint-disable */
/**
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { TableResponseBaseTableEntries } from "./TableResponseBaseTableEntries";
import {
  TableResponseBaseTableEntriesFromJSON,
  TableResponseBaseTableEntriesFromJSONTyped,
  TableResponseBaseTableEntriesToJSON,
  TableResponseBaseTableEntriesToJSONTyped,
} from "./TableResponseBaseTableEntries";

/**
 *
 * @export
 * @interface TableEntriesForTreeNodesResponseInner
 */
export interface TableEntriesForTreeNodesResponseInner {
  /**
   *
   * @type {Array<number>}
   * @memberof TableEntriesForTreeNodesResponseInner
   */
  addressInTree?: Array<number>;
  /**
   *
   * @type {string}
   * @memberof TableEntriesForTreeNodesResponseInner
   */
  predicate: string;
  /**
   *
   * @type {TableResponseBaseTableEntries}
   * @memberof TableEntriesForTreeNodesResponseInner
   */
  tableEntries: TableResponseBaseTableEntries;
  /**
   *
   * @type {Array<number>}
   * @memberof TableEntriesForTreeNodesResponseInner
   */
  possibleRulesAbove: Array<number>;
  /**
   *
   * @type {Array<number>}
   * @memberof TableEntriesForTreeNodesResponseInner
   */
  possibleRulesBelow: Array<number>;
}

/**
 * Check if a given object implements the TableEntriesForTreeNodesResponseInner interface.
 */
export function instanceOfTableEntriesForTreeNodesResponseInner(
  value: object,
): value is TableEntriesForTreeNodesResponseInner {
  if (!("predicate" in value) || value["predicate"] === undefined) return false;
  if (!("tableEntries" in value) || value["tableEntries"] === undefined)
    return false;
  if (
    !("possibleRulesAbove" in value) ||
    value["possibleRulesAbove"] === undefined
  )
    return false;
  if (
    !("possibleRulesBelow" in value) ||
    value["possibleRulesBelow"] === undefined
  )
    return false;
  return true;
}

export function TableEntriesForTreeNodesResponseInnerFromJSON(
  json: any,
): TableEntriesForTreeNodesResponseInner {
  return TableEntriesForTreeNodesResponseInnerFromJSONTyped(json, false);
}

export function TableEntriesForTreeNodesResponseInnerFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): TableEntriesForTreeNodesResponseInner {
  if (json == null) {
    return json;
  }
  return {
    addressInTree:
      json["addressInTree"] == null ? undefined : json["addressInTree"],
    predicate: json["predicate"],
    tableEntries: TableResponseBaseTableEntriesFromJSON(json["tableEntries"]),
    possibleRulesAbove: json["possibleRulesAbove"],
    possibleRulesBelow: json["possibleRulesBelow"],
  };
}

export function TableEntriesForTreeNodesResponseInnerToJSON(
  json: any,
): TableEntriesForTreeNodesResponseInner {
  return TableEntriesForTreeNodesResponseInnerToJSONTyped(json, false);
}

export function TableEntriesForTreeNodesResponseInnerToJSONTyped(
  value?: TableEntriesForTreeNodesResponseInner | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    addressInTree: value["addressInTree"],
    predicate: value["predicate"],
    tableEntries: TableResponseBaseTableEntriesToJSON(value["tableEntries"]),
    possibleRulesAbove: value["possibleRulesAbove"],
    possibleRulesBelow: value["possibleRulesBelow"],
  };
}
