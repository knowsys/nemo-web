// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { InnerTableQueryChildInformation } from "./InnerTableQueryChildInformation";
import {
  InnerTableQueryChildInformationFromJSON,
  InnerTableQueryChildInformationFromJSONTyped,
  InnerTableQueryChildInformationToJSON,
  InnerTableQueryChildInformationToJSONTyped,
} from "./InnerTableQueryChildInformation";
import type { TableQueryBaseTableEntries } from "./TableQueryBaseTableEntries";
import {
  TableQueryBaseTableEntriesFromJSON,
  TableQueryBaseTableEntriesFromJSONTyped,
  TableQueryBaseTableEntriesToJSON,
  TableQueryBaseTableEntriesToJSONTyped,
} from "./TableQueryBaseTableEntries";

/**
 *
 * @export
 * @interface InnerTableQuery
 */
export interface InnerTableQuery {
  /**
   *
   * @type {InnerTableQueryChildInformation}
   * @memberof InnerTableQuery
   */
  childInformation?: InnerTableQueryChildInformation;
  /**
   *
   * @type {TableQueryBaseTableEntries}
   * @memberof InnerTableQuery
   */
  tableEntries?: TableQueryBaseTableEntries;
}

/**
 * Check if a given object implements the InnerTableQuery interface.
 */
export function instanceOfInnerTableQuery(
  value: object,
): value is InnerTableQuery {
  return true;
}

export function InnerTableQueryFromJSON(json: any): InnerTableQuery {
  return InnerTableQueryFromJSONTyped(json, false);
}

export function InnerTableQueryFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): InnerTableQuery {
  if (json == null) {
    return json;
  }
  return {
    childInformation:
      json["childInformation"] == null
        ? undefined
        : InnerTableQueryChildInformationFromJSON(json["childInformation"]),
    tableEntries:
      json["tableEntries"] == null
        ? undefined
        : TableQueryBaseTableEntriesFromJSON(json["tableEntries"]),
  };
}

export function InnerTableQueryToJSON(json: any): InnerTableQuery {
  return InnerTableQueryToJSONTyped(json, false);
}

export function InnerTableQueryToJSONTyped(
  value?: InnerTableQuery | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    childInformation: InnerTableQueryChildInformationToJSON(
      value["childInformation"],
    ),
    tableEntries: TableQueryBaseTableEntriesToJSON(value["tableEntries"]),
  };
}
