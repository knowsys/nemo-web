// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { PredicateWithParameters } from "./PredicateWithParameters";
import {
  PredicateWithParametersFromJSON,
  PredicateWithParametersFromJSONTyped,
  PredicateWithParametersToJSON,
  PredicateWithParametersToJSONTyped,
} from "./PredicateWithParameters";

/**
 *
 * @export
 * @interface Rule
 */
export interface Rule {
  /**
   *
   * @type {number}
   * @memberof Rule
   */
  id: number;
  /**
   *
   * @type {PredicateWithParameters}
   * @memberof Rule
   */
  relevantHeadPredicate: PredicateWithParameters;
  /**
   *
   * @type {number}
   * @memberof Rule
   */
  relevantHeadPredicateIndex: number;
  /**
   *
   * @type {Array<PredicateWithParameters>}
   * @memberof Rule
   */
  bodyPredicates: Array<PredicateWithParameters>;
  /**
   *
   * @type {string}
   * @memberof Rule
   */
  stringRepresentation: string;
}

/**
 * Check if a given object implements the Rule interface.
 */
export function instanceOfRule(value: object): value is Rule {
  if (!("id" in value) || value["id"] === undefined) return false;
  if (
    !("relevantHeadPredicate" in value) ||
    value["relevantHeadPredicate"] === undefined
  )
    return false;
  if (
    !("relevantHeadPredicateIndex" in value) ||
    value["relevantHeadPredicateIndex"] === undefined
  )
    return false;
  if (!("bodyPredicates" in value) || value["bodyPredicates"] === undefined)
    return false;
  if (
    !("stringRepresentation" in value) ||
    value["stringRepresentation"] === undefined
  )
    return false;
  return true;
}

export function RuleFromJSON(json: any): Rule {
  return RuleFromJSONTyped(json, false);
}

export function RuleFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Rule {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"],
    relevantHeadPredicate: PredicateWithParametersFromJSON(
      json["relevantHeadPredicate"],
    ),
    relevantHeadPredicateIndex: json["relevantHeadPredicateIndex"],
    bodyPredicates: (json["bodyPredicates"] as Array<any>).map(
      PredicateWithParametersFromJSON,
    ),
    stringRepresentation: json["stringRepresentation"],
  };
}

export function RuleToJSON(json: any): Rule {
  return RuleToJSONTyped(json, false);
}

export function RuleToJSONTyped(
  value?: Rule | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    relevantHeadPredicate: PredicateWithParametersToJSON(
      value["relevantHeadPredicate"],
    ),
    relevantHeadPredicateIndex: value["relevantHeadPredicateIndex"],
    bodyPredicates: (value["bodyPredicates"] as Array<any>).map(
      PredicateWithParametersToJSON,
    ),
    stringRepresentation: value["stringRepresentation"],
  };
}
